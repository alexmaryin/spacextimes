// Generated by Dagger (https://dagger.dev).
package ru.alexmaryin.spacextimes_rx.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.alexmaryin.spacextimes_rx.data.api.translator.TranslatorApi;
import ru.alexmaryin.spacextimes_rx.data.api.translator.TranslatorApiImpl;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideTranslatorFactory implements Factory<TranslatorApi> {
  private final ApplicationModule module;

  private final Provider<TranslatorApiImpl> translatorProvider;

  public ApplicationModule_ProvideTranslatorFactory(ApplicationModule module,
      Provider<TranslatorApiImpl> translatorProvider) {
    this.module = module;
    this.translatorProvider = translatorProvider;
  }

  @Override
  public TranslatorApi get() {
    return provideTranslator(module, translatorProvider.get());
  }

  public static ApplicationModule_ProvideTranslatorFactory create(ApplicationModule module,
      Provider<TranslatorApiImpl> translatorProvider) {
    return new ApplicationModule_ProvideTranslatorFactory(module, translatorProvider);
  }

  public static TranslatorApi provideTranslator(ApplicationModule instance,
      TranslatorApiImpl translator) {
    return Preconditions.checkNotNullFromProvides(instance.provideTranslator(translator));
  }
}
