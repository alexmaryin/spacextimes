// Generated by Dagger (https://dagger.dev).
package ru.alexmaryin.spacextimes_rx;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import ru.alexmaryin.spacextimes_rx.data.api.ApiService;
import ru.alexmaryin.spacextimes_rx.data.api.SpaceXApi;
import ru.alexmaryin.spacextimes_rx.data.api.SpaceXApiImpl;
import ru.alexmaryin.spacextimes_rx.data.api.translator.TranslatorApi;
import ru.alexmaryin.spacextimes_rx.data.api.translator.TranslatorApiImpl;
import ru.alexmaryin.spacextimes_rx.data.api.wiki.WikiLoaderApi;
import ru.alexmaryin.spacextimes_rx.data.api.wiki.WikiLoaderImpl;
import ru.alexmaryin.spacextimes_rx.data.repository.SpacexDataRepository;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule_ProvideApiFactory;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule_ProvideApiServiceFactory;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule_ProvideBaseUrlFactory;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule_ProvideOkHttpClientFactory;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule_ProvideRetrofitFactory;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule_ProvideTranslatorFactory;
import ru.alexmaryin.spacextimes_rx.di.ApplicationModule_ProvideWikiApiFactory;
import ru.alexmaryin.spacextimes_rx.di.Settings;
import ru.alexmaryin.spacextimes_rx.ui.view.activities.MainActivity;
import ru.alexmaryin.spacextimes_rx.ui.view.fragments.CrewDetailFragment;
import ru.alexmaryin.spacextimes_rx.ui.view.fragments.DragonDetailFragment;
import ru.alexmaryin.spacextimes_rx.ui.view.fragments.MainFragment;
import ru.alexmaryin.spacextimes_rx.ui.view.fragments.MainFragment_MembersInjector;
import ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.CrewDetailViewModel;
import ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.CrewDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.DragonDetailViewModel;
import ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.DragonDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.SpaceXViewModel;
import ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.SpaceXViewModel_HiltModules_KeyModule_ProvideFactory;
import ru.alexmaryin.spacextimes_rx.utils.NetworkHelper;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC extends App_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final ApplicationModule applicationModule;

  private volatile Object settings = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object apiService = new MemoizedSentinel();

  private volatile Object spaceXApi = new MemoizedSentinel();

  private volatile Object networkHelper = new MemoizedSentinel();

  private volatile Object translatorApi = new MemoizedSentinel();

  private DaggerApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam,
      ApplicationModule applicationModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.applicationModule = applicationModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Settings settings() {
    Object local = settings;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = settings;
        if (local instanceof MemoizedSentinel) {
          local = new Settings();
          settings = DoubleCheck.reentrantCheck(settings, local);
        }
      }
    }
    return (Settings) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideOkHttpClientFactory.provideOkHttpClient(applicationModule);
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideRetrofitFactory.provideRetrofit(applicationModule, okHttpClient(), ApplicationModule_ProvideBaseUrlFactory.provideBaseUrl(applicationModule));
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private ApiService apiService() {
    Object local = apiService;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiService;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideApiServiceFactory.provideApiService(applicationModule, retrofit());
          apiService = DoubleCheck.reentrantCheck(apiService, local);
        }
      }
    }
    return (ApiService) local;
  }

  private SpaceXApiImpl spaceXApiImpl() {
    return new SpaceXApiImpl(apiService());
  }

  private SpaceXApi spaceXApi() {
    Object local = spaceXApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = spaceXApi;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideApiFactory.provideApi(applicationModule, spaceXApiImpl());
          spaceXApi = DoubleCheck.reentrantCheck(spaceXApi, local);
        }
      }
    }
    return (SpaceXApi) local;
  }

  private NetworkHelper networkHelper() {
    Object local = networkHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = networkHelper;
        if (local instanceof MemoizedSentinel) {
          local = new NetworkHelper(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          networkHelper = DoubleCheck.reentrantCheck(networkHelper, local);
        }
      }
    }
    return (NetworkHelper) local;
  }

  private WikiLoaderApi wikiLoaderApi() {
    return ApplicationModule_ProvideWikiApiFactory.provideWikiApi(applicationModule, new WikiLoaderImpl());
  }

  private TranslatorApiImpl translatorApiImpl() {
    return new TranslatorApiImpl(spaceXApi());
  }

  private TranslatorApi translatorApi() {
    Object local = translatorApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = translatorApi;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideTranslatorFactory.provideTranslator(applicationModule, translatorApiImpl());
          translatorApi = DoubleCheck.reentrantCheck(translatorApi, local);
        }
      }
    }
    return (TranslatorApi) local;
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  @Override
  public void injectApp(App app) {
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (applicationModule == null) {
        this.applicationModule = new ApplicationModule();
      }
      return new DaggerApp_HiltComponents_SingletonC(applicationContextModule, applicationModule);
    }
  }

  private final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public App_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends App_HiltComponents.ActivityC {
      private final Activity activity;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerApp_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerApp_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(3).add(CrewDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(DragonDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SpaceXViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      @Override
      public void injectMainActivity(MainActivity arg0) {
      }

      private final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public App_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends App_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerApp_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerApp_HiltComponents_SingletonC.this.applicationContextModule), ActivityCImpl.this.getViewModelKeys(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        @Override
        public void injectCrewDetailFragment(CrewDetailFragment arg0) {
        }

        @Override
        public void injectDragonDetailFragment(DragonDetailFragment arg0) {
        }

        @Override
        public void injectMainFragment(MainFragment mainFragment) {
          injectMainFragment2(mainFragment);
        }

        private MainFragment injectMainFragment2(MainFragment instance) {
          MainFragment_MembersInjector.injectSettings(instance, DaggerApp_HiltComponents_SingletonC.this.settings());
          return instance;
        }

        private final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public App_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public App_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends App_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public App_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
      private final SavedStateHandle savedStateHandle;

      private volatile Provider<CrewDetailViewModel> crewDetailViewModelProvider;

      private volatile Provider<DragonDetailViewModel> dragonDetailViewModelProvider;

      private volatile Provider<SpaceXViewModel> spaceXViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandleParam) {
        this.savedStateHandle = savedStateHandleParam;
      }

      private SpacexDataRepository spacexDataRepository() {
        return new SpacexDataRepository(DaggerApp_HiltComponents_SingletonC.this.spaceXApi());
      }

      private CrewDetailViewModel crewDetailViewModel() {
        return new CrewDetailViewModel(savedStateHandle, spacexDataRepository(), DaggerApp_HiltComponents_SingletonC.this.networkHelper(), DaggerApp_HiltComponents_SingletonC.this.wikiLoaderApi());
      }

      private Provider<CrewDetailViewModel> crewDetailViewModelProvider() {
        Object local = crewDetailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          crewDetailViewModelProvider = (Provider<CrewDetailViewModel>) local;
        }
        return (Provider<CrewDetailViewModel>) local;
      }

      private DragonDetailViewModel dragonDetailViewModel() {
        return new DragonDetailViewModel(savedStateHandle, spacexDataRepository(), DaggerApp_HiltComponents_SingletonC.this.networkHelper(), DaggerApp_HiltComponents_SingletonC.this.wikiLoaderApi());
      }

      private Provider<DragonDetailViewModel> dragonDetailViewModelProvider() {
        Object local = dragonDetailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          dragonDetailViewModelProvider = (Provider<DragonDetailViewModel>) local;
        }
        return (Provider<DragonDetailViewModel>) local;
      }

      private SpaceXViewModel spaceXViewModel() {
        return new SpaceXViewModel(spacexDataRepository(), DaggerApp_HiltComponents_SingletonC.this.networkHelper(), DaggerApp_HiltComponents_SingletonC.this.settings(), DaggerApp_HiltComponents_SingletonC.this.translatorApi());
      }

      private Provider<SpaceXViewModel> spaceXViewModelProvider() {
        Object local = spaceXViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          spaceXViewModelProvider = (Provider<SpaceXViewModel>) local;
        }
        return (Provider<SpaceXViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(3).put("ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.CrewDetailViewModel", (Provider) crewDetailViewModelProvider()).put("ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.DragonDetailViewModel", (Provider) dragonDetailViewModelProvider()).put("ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.SpaceXViewModel", (Provider) spaceXViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.CrewDetailViewModel 
            return (T) ViewModelCImpl.this.crewDetailViewModel();

            case 1: // ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.DragonDetailViewModel 
            return (T) ViewModelCImpl.this.dragonDetailViewModel();

            case 2: // ru.alexmaryin.spacextimes_rx.ui.view.viewmodel.SpaceXViewModel 
            return (T) ViewModelCImpl.this.spaceXViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
